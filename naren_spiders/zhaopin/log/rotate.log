[11052][2016-09-05 12:24:10,540](ERROR)unittest-11052 : EXCEPTION_FRAMES:(dp1
S'etype'
p2
crequests.exceptions
ProxyError
p3
sS'frames'
p4
(lp5
(dp6
S'function'
p7
S'send'
p8
sS'post_context'
p9
(lp10
S''
aS'            raise ConnectionError(e, request=request)'
p11
aS''
aS'        except ClosedPoolError as e:'
p12
aS'            raise ConnectionError(e, request=request)'
p13
aS''
asS'pre_context'
p14
(lp15
S'                if not isinstance(e.reason, NewConnectionError):'
p16
aS'                    raise ConnectTimeout(e, request=request)'
p17
aS''
aS'            if isinstance(e.reason, ResponseError):'
p18
aS'                raise RetryError(e, request=request)'
p19
aS''
aS'            if isinstance(e.reason, _ProxyError):'
p20
asS'lineno'
p21
I464
sS'vars'
p22
(dp23
S'proxies'
p24
S"OrderedDict([(u'http', u'http://220.248.230.217:3128'), (u'https', u'http://220.248.230.217:3128')])"
p25
sS'e'
S'MaxRetryError("HTTPConnectionPool(host=u\'220.248.230.217\', port=3128): Max retries exceeded with url: http://rd2.zhaopin.com/s/loginmgr/loginproc_new.asp (Caused by ProxyError(\'Cannot connect to proxy.\', NewConnectionError(\'<requests.packages.urllib3.connection.HTTPConnection object at 0x0000000004B414A8>: Failed to establish a new connection: [Errno 10060] \',)))",)'
p26
sS'stream'
p27
S'False'
p28
sS'url'
p29
S"'http://rd2.zhaopin.com/s/loginmgr/loginproc_new.asp'"
p30
sS'verify'
p31
S'True'
p32
sS'self'
p33
S'<requests.adapters.HTTPAdapter object at 0x000000000432D668>'
p34
sS'request'
p35
S'<PreparedRequest [GET]>'
p36
sS'cert'
p37
S'None'
p38
sS'timeout'
p39
S'<requests.packages.urllib3.util.timeout.Timeout object at 0x0000000004B41400>'
p40
sS'chunked'
p41
g28
sS'conn'
p42
S'<requests.packages.urllib3.connectionpool.HTTPConnectionPool object at 0x0000000004B412E8>'
p43
ssS'pre_context_lineno'
p44
I457
sS'id'
p45
L78938632L
sS'context_line'
p46
S'                raise ProxyError(e, request=request)'
p47
sS'filename'
p48
S'C:\\Python27\\lib\\site-packages\\requests\\adapters.py'
p49
sa(dp50
g7
g8
sg9
(lp51
S''
aS'        # Total elapsed time of the request (approximately)'
p52
aS'        r.elapsed = datetime.utcnow() - start'
p53
aS''
aS'        # Response manipulation hooks'
p54
aS"        r = dispatch_hook('response', hooks, r, **kwargs)"
p55
asg14
(lp56
S'        # Get the appropriate adapter to use'
p57
aS'        adapter = self.get_adapter(url=request.url)'
p58
aS''
aS'        # Start time (approximately) of the request'
p59
aS'        start = datetime.utcnow()'
p60
aS''
aS'        # Send the request'
p61
asg21
I584
sg22
(dp62
S'checked_urls'
p63
S'set([])'
p64
sg27
g28
sS'hooks'
p65
S"{'response': []}"
p66
sS'adapter'
p67
S'<requests.adapters.HTTPAdapter object at 0x000000000432D668>'
p68
sg35
S'<PreparedRequest [GET]>'
p69
sS'start'
p70
S'datetime.datetime(2016, 9, 5, 4, 23, 49, 534000)'
p71
sS'kwargs'
p72
S"{'stream': False, 'verify': True, 'cert': None, 'timeout': None, 'proxies': OrderedDict([(u'http', u'http://220.248.230.217:3128'), (u'https', u'http://220.248.230.217:3128')])}"
p73
sS'allow_redirects'
p74
g32
sg33
S'<requests.sessions.Session object at 0x00000000044136D8>'
p75
ssg44
I577
sg45
L78589896L
sg46
S'        r = adapter.send(request, **kwargs)'
p76
sg48
S'C:\\Python27\\lib\\site-packages\\requests\\sessions.py'
p77
sa(dp78
g7
g35
sg9
(lp79
S''
aS'        return resp'
p80
aS''
aS'    def get(self, url, **kwargs):'
p81
aS'        """Sends a GET request. Returns :class:`Response` object.'
p82
aS''
asg14
(lp83
S''
aS'        # Send the request.'
p84
aS'        send_kwargs = {'
p85
aS"            'timeout': timeout,"
p86
aS"            'allow_redirects': allow_redirects,"
p87
aS'        }'
p88
aS'        send_kwargs.update(settings)'
p89
asg21
I474
sg22
(dp90
S'files'
p91
S'None'
p92
sS'cookies'
p93
S'None'
p94
sg27
S'None'
p95
sS'settings'
p96
S"{'verify': True, 'cert': None, 'proxies': OrderedDict([(u'http', u'http://220.248.230.217:3128'), (u'https', u'http://220.248.230.217:3128')]), 'stream': False}"
p97
sg29
S"'http://rd2.zhaopin.com/s/loginmgr/loginproc_new.asp'"
p98
sg31
S'None'
p99
sg33
S'<requests.sessions.Session object at 0x00000000044136D8>'
p100
sS'req'
p101
S'<Request [GET]>'
p102
sg37
S'None'
p103
sS'auth'
p104
S'None'
p105
sS'prep'
p106
S'<PreparedRequest [GET]>'
p107
sS'headers'
p108
S"{'Referer': 'http://rd2.zhaopin.com/s/loginmgr/choose.asp', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.89 Safari/537.36'}"
p109
sS'json'
p110
S'None'
p111
sS'params'
p112
S'None'
p113
sg39
S'None'
p114
sg65
S'None'
p115
sS'send_kwargs'
p116
S"{'cert': None, 'stream': False, 'timeout': None, 'verify': True, 'allow_redirects': True, 'proxies': OrderedDict([(u'http', u'http://220.248.230.217:3128'), (u'https', u'http://220.248.230.217:3128')])}"
p117
sg74
g32
sg24
S"{u'http': u'http://220.248.230.217:3128', u'https': u'http://220.248.230.217:3128'}"
p118
sS'data'
p119
S'None'
p120
sS'method'
p121
S"'GET'"
p122
ssg44
I467
sg45
L78589832L
sg46
S'        resp = self.send(prep, **send_kwargs)'
p123
sg48
g77
sa(dp124
g7
S'get'
p125
sg9
(lp126
S''
aS'    def options(self, url, **kwargs):'
p127
aS'        """Sends a OPTIONS request. Returns :class:`Response` object.'
p128
aS''
aS'        :param url: URL for the new :class:`Request` object.'
p129
aS'        :param \\*\\*kwargs: Optional arguments that ``request`` takes.'
p130
asg14
(lp131
S'        """Sends a GET request. Returns :class:`Response` object.'
p132
aS''
aS'        :param url: URL for the new :class:`Request` object.'
p133
aS'        :param \\*\\*kwargs: Optional arguments that ``request`` takes.'
p134
aS'        """'
p135
aS''
aS"        kwargs.setdefault('allow_redirects', True)"
p136
asg21
I486
sg22
(dp137
g29
S"'http://rd2.zhaopin.com/s/loginmgr/loginproc_new.asp'"
p138
sg33
S'<requests.sessions.Session object at 0x00000000044136D8>'
p139
sg72
S"{'cookies': None, 'headers': {'Referer': 'http://rd2.zhaopin.com/s/loginmgr/choose.asp', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.89 Safari/537.36'}, 'timeout': None, 'allow_redirects': True, 'proxies': {u'http': u'http://220.248.230.217:3128', u'https': u'http://220.248.230.217:3128'}, 'data': None}"
p140
ssg44
I479
sg45
L78589768L
sg46
S"        return self.request('GET', url, **kwargs)"
p141
sg48
g77
sa(dp142
g7
g35
sg9
(lp143
sg14
(lp144
sg21
I132
sg22
(dp145
S'baseutil'
p146
S"<module 'nanautil.util' from 'C:\\Python27\\lib\\site-packages\\nanautil-0.1-py2.7.egg\\nanautil\\util.pyc'>"
p147
sS'request_func'
p148
S'<bound method Session.get of <requests.sessions.Session object at 0x00000000044136D8>>'
p149
sg33
S'<assistlib.utils.common.HttpSessionRequest object at 0x000000000404CF98>'
p150
sS'args'
p151
S'()'
p152
sS'uri'
p153
S"'http://rd2.zhaopin.com/s/loginmgr/loginproc_new.asp'"
p154
sg108
S"{'Referer': 'http://rd2.zhaopin.com/s/loginmgr/choose.asp', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.89 Safari/537.36'}"
p155
sS'ex'
p156
S'ProxyError(MaxRetryError("HTTPConnectionPool(host=u\'220.248.230.217\', port=3128): Max retries exceeded with url: http://rd2.zhaopin.com/s/loginmgr/loginproc_new.asp (Caused by ProxyError(\'Cannot connect to proxy.\', NewConnectionError(\'<requests.packages.urllib3.connection.HTTPConnection object at 0x0000000004B414A8>: Failed to establish a new connection: [Errno 10060] \',)))",),)'
p157
sg39
S'None'
p158
sg72
S"{'cookies': None}"
p159
sg24
S"{u'http': u'http://220.248.230.217:3128', u'https': u'http://220.248.230.217:3128'}"
p160
sg121
S"'get'"
p161
sS'datas'
p162
S'None'
p163
ssg44
Nsg45
L78589576L
sg46
Nsg48
S'build/bdist.linux-x86_64/egg/assistlib/utils/common.py'
p164
sasS'evalue'
p165
g3
(crequests.packages.urllib3.exceptions
MaxRetryError
p166
(NS'http://rd2.zhaopin.com/s/loginmgr/loginproc_new.asp'
p167
NtRp168
tp169
Rp170
(dp171
g35
ccopy_reg
_reconstructor
p172
(crequests.models
PreparedRequest
p173
c__builtin__
object
p174
NtRp175
(dp176
S'body'
p177
Nsg29
S'http://rd2.zhaopin.com/s/loginmgr/loginproc_new.asp'
p178
sg65
(dp179
S'response'
p180
(lp181
ssg108
g172
(crequests.structures
CaseInsensitiveDict
p182
g174
NtRp183
(dp184
S'_store'
p185
crequests.packages.urllib3.packages.ordered_dict
OrderedDict
p186
((lp187
(lp188
S'connection'
p189
a(S'Connection'
p190
S'keep-alive'
p191
tp192
aa(lp193
S'accept-encoding'
p194
a(S'Accept-Encoding'
p195
S'gzip, deflate'
p196
tp197
aa(lp198
S'accept'
p199
a(S'Accept'
p200
S'*/*'
p201
tp202
aa(lp203
S'user-agent'
p204
a(S'User-Agent'
p205
S'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.89 Safari/537.36'
p206
tp207
aa(lp208
S'referer'
p209
a(S'Referer'
p210
S'http://rd2.zhaopin.com/s/loginmgr/choose.asp'
p211
tp212
aatRp213
sbsS'_cookies'
p214
g172
(crequests.cookies
RequestsCookieJar
p215
g174
NtRp216
(dp217
S'_now'
p218
I1473049429
sS'_policy'
p219
(icookielib
DefaultCookiePolicy
p220
(dp221
S'strict_rfc2965_unverifiable'
p222
I01
sS'strict_ns_domain'
p223
I0
sS'_allowed_domains'
p224
NsS'rfc2109_as_netscape'
p225
NsS'rfc2965'
p226
I00
sS'strict_domain'
p227
I00
sg218
I1473049429
sS'strict_ns_set_path'
p228
I00
sS'strict_ns_unverifiable'
p229
I00
sS'strict_ns_set_initial_dollar'
p230
I00
sS'hide_cookie2'
p231
I00
sS'_blocked_domains'
p232
(tsS'netscape'
p233
I01
sbsg214
(dp234
sbsg121
S'GET'
p235
sbsg180
NsbsS'title'
p236
S'HttpRequest.request'
p237
s.
[1948][2016-09-05 15:41:35,808](ERROR)unittest-1948 : EXCEPTION_FRAMES:(dp1
S'etype'
p2
crequests.exceptions
ProxyError
p3
sS'frames'
p4
(lp5
(dp6
S'function'
p7
S'send'
p8
sS'post_context'
p9
(lp10
S''
aS'            raise ConnectionError(e, request=request)'
p11
aS''
aS'        except ClosedPoolError as e:'
p12
aS'            raise ConnectionError(e, request=request)'
p13
aS''
asS'pre_context'
p14
(lp15
S'                if not isinstance(e.reason, NewConnectionError):'
p16
aS'                    raise ConnectTimeout(e, request=request)'
p17
aS''
aS'            if isinstance(e.reason, ResponseError):'
p18
aS'                raise RetryError(e, request=request)'
p19
aS''
aS'            if isinstance(e.reason, _ProxyError):'
p20
asS'lineno'
p21
I464
sS'vars'
p22
(dp23
S'proxies'
p24
S"OrderedDict([(u'http', u'http://80.242.219.50:3128'), (u'https', u'http://80.242.219.50:3128')])"
p25
sS'e'
S'MaxRetryError("HTTPConnectionPool(host=u\'80.242.219.50\', port=3128): Max retries exceeded with url: http://rd2.zhaopin.com/s/loginmgr/loginproc_new.asp (Caused by ProxyError(\'Cannot connect to proxy.\', NewConnectionError(\'<requests.packages.urllib3.connection.HTTPConnection object at 0x0000000004E716A0>: Failed to establish a new connection: [Errno 10061] \',)))",)'
p26
sS'stream'
p27
S'False'
p28
sS'url'
p29
S"'http://rd2.zhaopin.com/s/loginmgr/loginproc_new.asp'"
p30
sS'verify'
p31
S'True'
p32
sS'self'
p33
S'<requests.adapters.HTTPAdapter object at 0x0000000004E71E10>'
p34
sS'request'
p35
S'<PreparedRequest [GET]>'
p36
sS'cert'
p37
S'None'
p38
sS'timeout'
p39
S'<requests.packages.urllib3.util.timeout.Timeout object at 0x0000000004E71EF0>'
p40
sS'chunked'
p41
g28
sS'conn'
p42
S'<requests.packages.urllib3.connectionpool.HTTPConnectionPool object at 0x0000000004E71518>'
p43
ssS'pre_context_lineno'
p44
I457
sS'id'
p45
L82367176L
sS'context_line'
p46
S'                raise ProxyError(e, request=request)'
p47
sS'filename'
p48
S'C:\\Python27\\lib\\site-packages\\requests\\adapters.py'
p49
sa(dp50
g7
g8
sg9
(lp51
S''
aS'        # Total elapsed time of the request (approximately)'
p52
aS'        r.elapsed = datetime.utcnow() - start'
p53
aS''
aS'        # Response manipulation hooks'
p54
aS"        r = dispatch_hook('response', hooks, r, **kwargs)"
p55
asg14
(lp56
S'        # Get the appropriate adapter to use'
p57
aS'        adapter = self.get_adapter(url=request.url)'
p58
aS''
aS'        # Start time (approximately) of the request'
p59
aS'        start = datetime.utcnow()'
p60
aS''
aS'        # Send the request'
p61
asg21
I584
sg22
(dp62
S'checked_urls'
p63
S'set([])'
p64
sg27
g28
sS'hooks'
p65
S"{'response': []}"
p66
sg33
S'<requests.sessions.Session object at 0x0000000004E71BE0>'
p67
sg35
S'<PreparedRequest [GET]>'
p68
sS'start'
p69
S'datetime.datetime(2016, 9, 5, 7, 41, 33, 868000)'
p70
sS'kwargs'
p71
S"{'stream': False, 'verify': True, 'cert': None, 'timeout': None, 'proxies': OrderedDict([(u'http', u'http://80.242.219.50:3128'), (u'https', u'http://80.242.219.50:3128')])}"
p72
sS'allow_redirects'
p73
g32
sS'adapter'
p74
S'<requests.adapters.HTTPAdapter object at 0x0000000004E71E10>'
p75
ssg44
I577
sg45
L82367240L
sg46
S'        r = adapter.send(request, **kwargs)'
p76
sg48
S'C:\\Python27\\lib\\site-packages\\requests\\sessions.py'
p77
sa(dp78
g7
g35
sg9
(lp79
S''
aS'        return resp'
p80
aS''
aS'    def get(self, url, **kwargs):'
p81
aS'        """Sends a GET request. Returns :class:`Response` object.'
p82
aS''
asg14
(lp83
S''
aS'        # Send the request.'
p84
aS'        send_kwargs = {'
p85
aS"            'timeout': timeout,"
p86
aS"            'allow_redirects': allow_redirects,"
p87
aS'        }'
p88
aS'        send_kwargs.update(settings)'
p89
asg21
I474
sg22
(dp90
S'files'
p91
S'None'
p92
sS'cookies'
p93
S"<RequestsCookieJar[Cookie(version=0, name='JsOrglogin', value='610588052', port=None, port_specified=False, domain='.zhaopin.com', domain_specified=True, domain_initial_dot=True, path='/', path_specified=True, secure=False, expires=1473072096, discard=False, comment=None, comment_url=None, rest={}, rfc2109=False), Cookie(version=0, name='RDsUserInfo', value='347320664E73556A47655B61466454734A675977506851735F663F73296A4A650C611164117309675D775568527356664A73576A44655A61486433733D675777CA39011A5F662073336A4A655961486424733767577752685173576641735E6A47655B6141645D7332673E775868587349664673476A46655D61496452734267517724682D73596643735C6A226529614E642C7322675A775668547356664A73546A4265586144645D7326673E7758685073546642735C6A246521614E64557348671', port=None, port_specified=False, domain='.zhaopin.com', domain_specified=True, domain_initial_dot=True, path='/', path_specified=True, secure=False, expires=None, discard=True, comment=None, comment_url=None, rest={}, rfc2109=False), Cookie(version=0, name='xychkcontr', value='70329032%2c0', port=None, port_specified=False, domain='.zhaopin.com', domain_specified=True, domain_initial_dot=True, path='/', path_specified=True, secure=False, expires=None, discard=True, comment=None, comment_url=None, rest={}, rfc2109=False)]>"
p94
sg65
S'None'
p95
sg27
S'None'
p96
sS'settings'
p97
S"{'verify': True, 'cert': None, 'proxies': OrderedDict([(u'http', u'http://80.242.219.50:3128'), (u'https', u'http://80.242.219.50:3128')]), 'stream': False}"
p98
sg29
S"'http://rd2.zhaopin.com/s/loginmgr/loginproc_new.asp'"
p99
sg31
S'None'
p100
sg33
S'<requests.sessions.Session object at 0x0000000004E71BE0>'
p101
sS'req'
p102
S'<Request [GET]>'
p103
sS'json'
p104
S'None'
p105
sS'auth'
p106
S'None'
p107
sS'method'
p108
S"'GET'"
p109
sS'headers'
p110
S"{'Referer': 'http://rd2.zhaopin.com/s/loginmgr/choose.asp', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.89 Safari/537.36'}"
p111
sg37
S'None'
p112
sS'params'
p113
S'None'
p114
sg39
S'None'
p115
sS'send_kwargs'
p116
S"{'cert': None, 'stream': False, 'timeout': None, 'verify': True, 'allow_redirects': True, 'proxies': OrderedDict([(u'http', u'http://80.242.219.50:3128'), (u'https', u'http://80.242.219.50:3128')])}"
p117
sg73
g32
sg24
S"{u'http': u'http://80.242.219.50:3128', u'https': u'http://80.242.219.50:3128'}"
p118
sS'data'
p119
S'None'
p120
sS'prep'
p121
S'<PreparedRequest [GET]>'
p122
ssg44
I467
sg45
L82367368L
sg46
S'        resp = self.send(prep, **send_kwargs)'
p123
sg48
g77
sa(dp124
g7
S'get'
p125
sg9
(lp126
S''
aS'    def options(self, url, **kwargs):'
p127
aS'        """Sends a OPTIONS request. Returns :class:`Response` object.'
p128
aS''
aS'        :param url: URL for the new :class:`Request` object.'
p129
aS'        :param \\*\\*kwargs: Optional arguments that ``request`` takes.'
p130
asg14
(lp131
S'        """Sends a GET request. Returns :class:`Response` object.'
p132
aS''
aS'        :param url: URL for the new :class:`Request` object.'
p133
aS'        :param \\*\\*kwargs: Optional arguments that ``request`` takes.'
p134
aS'        """'
p135
aS''
aS"        kwargs.setdefault('allow_redirects', True)"
p136
asg21
I486
sg22
(dp137
g29
S"'http://rd2.zhaopin.com/s/loginmgr/loginproc_new.asp'"
p138
sg33
S'<requests.sessions.Session object at 0x0000000004E71BE0>'
p139
sg71
S"{'cookies': <RequestsCookieJar[Cookie(version=0, name='JsOrglogin', value='610588052', port=None, port_specified=False, domain='.zhaopin.com', domain_specified=True, domain_initial_dot=True, path='/', path_specified=True, secure=False, expires=1473072096, discard=False, comment=None, comment_url=None, rest={}, rfc2109=False), Cookie(version=0, name='RDsUserInfo', value='347320664E73556A47655B61466454734A675977506851735F663F73296A4A650C611164117309675D775568527356664A73576A44655A61486433733D675777CA39011A5F662073336A4A655961486424733767577752685173576641735E6A47655B6141645D7332673E775868587349664673476A46655D61496452734267517724682D73596643735C6A226529614E642C7322675A775668547356664A73546A4265586144645D7326673E7758685073546642735C6A246521614E64557348671', port=None, port_specified=False, domain='.zhaopin.com', domain_specified=True, domain_initial_dot=True, path='/', path_specified=True, secure=False, expires=None, discard=True, comment=None, comment_url=None, rest={}, rfc2109=False), Cookie(version=0, name='xychkcontr', value='70329032%2c0', port=None, port_specified=False, domain='.zhaopin.com', domain_specified=True, domain_initial_dot=True, path='/', path_specified=True, secure=False, expires=None, discard=True, comment=None, comment_url=None, rest={}, rfc2109=False)]>, 'headers': {'Referer': 'http://rd2.zhaopin.com/s/loginmgr/choose.asp', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.89 Safari/537.36'}, 'timeout': None, 'allow_redirects': True, 'proxies': {u'http': u'http://80.242.219.50:3128', u'https': u'http://80.242.219.50:3128'}, 'data': None}"
p140
ssg44
I479
sg45
L82367304L
sg46
S"        return self.request('GET', url, **kwargs)"
p141
sg48
g77
sa(dp142
g7
g35
sg9
(lp143
sg14
(lp144
sg21
I132
sg22
(dp145
S'args'
p146
S'()'
p147
sS'request_func'
p148
S'<bound method Session.get of <requests.sessions.Session object at 0x0000000004E71BE0>>'
p149
sg33
S'<assistlib.utils.common.HttpSessionRequest object at 0x0000000004E60D30>'
p150
sS'baseutil'
p151
S"<module 'nanautil.util' from 'C:\\Python27\\lib\\site-packages\\nanautil-0.1-py2.7.egg\\nanautil\\util.pyc'>"
p152
sS'uri'
p153
S"'http://rd2.zhaopin.com/s/loginmgr/loginproc_new.asp'"
p154
sg110
S"{'Referer': 'http://rd2.zhaopin.com/s/loginmgr/choose.asp', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.89 Safari/537.36'}"
p155
sS'ex'
p156
S'ProxyError(MaxRetryError("HTTPConnectionPool(host=u\'80.242.219.50\', port=3128): Max retries exceeded with url: http://rd2.zhaopin.com/s/loginmgr/loginproc_new.asp (Caused by ProxyError(\'Cannot connect to proxy.\', NewConnectionError(\'<requests.packages.urllib3.connection.HTTPConnection object at 0x0000000004E716A0>: Failed to establish a new connection: [Errno 10061] \',)))",),)'
p157
sg39
S'None'
p158
sg71
S"{'cookies': <RequestsCookieJar[Cookie(version=0, name='JsOrglogin', value='610588052', port=None, port_specified=False, domain='.zhaopin.com', domain_specified=True, domain_initial_dot=True, path='/', path_specified=True, secure=False, expires=1473072096, discard=False, comment=None, comment_url=None, rest={}, rfc2109=False), Cookie(version=0, name='RDsUserInfo', value='347320664E73556A47655B61466454734A675977506851735F663F73296A4A650C611164117309675D775568527356664A73576A44655A61486433733D675777CA39011A5F662073336A4A655961486424733767577752685173576641735E6A47655B6141645D7332673E775868587349664673476A46655D61496452734267517724682D73596643735C6A226529614E642C7322675A775668547356664A73546A4265586144645D7326673E7758685073546642735C6A246521614E64557348671', port=None, port_specified=False, domain='.zhaopin.com', domain_specified=True, domain_initial_dot=True, path='/', path_specified=True, secure=False, expires=None, discard=True, comment=None, comment_url=None, rest={}, rfc2109=False), Cookie(version=0, name='xychkcontr', value='70329032%2c0', port=None, port_specified=False, domain='.zhaopin.com', domain_specified=True, domain_initial_dot=True, path='/', path_specified=True, secure=False, expires=None, discard=True, comment=None, comment_url=None, rest={}, rfc2109=False)]>}"
p159
sg24
S"{u'http': u'http://80.242.219.50:3128', u'https': u'http://80.242.219.50:3128'}"
p160
sg108
S"'get'"
p161
sS'datas'
p162
S'None'
p163
ssg44
Nsg45
L82367432L
sg46
Nsg48
S'build/bdist.linux-x86_64/egg/assistlib/utils/common.py'
p164
sasS'evalue'
p165
g3
(crequests.packages.urllib3.exceptions
MaxRetryError
p166
(NS'http://rd2.zhaopin.com/s/loginmgr/loginproc_new.asp'
p167
NtRp168
tp169
Rp170
(dp171
g35
ccopy_reg
_reconstructor
p172
(crequests.models
PreparedRequest
p173
c__builtin__
object
p174
NtRp175
(dp176
S'body'
p177
Nsg29
S'http://rd2.zhaopin.com/s/loginmgr/loginproc_new.asp'
p178
sg65
(dp179
S'response'
p180
(lp181
ssg110
g172
(crequests.structures
CaseInsensitiveDict
p182
g174
NtRp183
(dp184
S'_store'
p185
crequests.packages.urllib3.packages.ordered_dict
OrderedDict
p186
((lp187
(lp188
S'connection'
p189
a(S'Connection'
p190
S'keep-alive'
p191
tp192
aa(lp193
S'accept-encoding'
p194
a(S'Accept-Encoding'
p195
S'gzip, deflate'
p196
tp197
aa(lp198
S'accept'
p199
a(S'Accept'
p200
S'*/*'
p201
tp202
aa(lp203
S'user-agent'
p204
a(S'User-Agent'
p205
S'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.89 Safari/537.36'
p206
tp207
aa(lp208
S'referer'
p209
a(S'Referer'
p210
S'http://rd2.zhaopin.com/s/loginmgr/choose.asp'
p211
tp212
aa(lp213
S'cookie'
p214
a(S'Cookie'
p215
S'xychkcontr=70329032%2c0; JsOrglogin=610588052; RDsUserInfo=347320664E73556A47655B61466454734A675977506851735F663F73296A4A650C611164117309675D775568527356664A73576A44655A61486433733D675777CA39011A5F662073336A4A655961486424733767577752685173576641735E6A47655B6141645D7332673E775868587349664673476A46655D61496452734267517724682D73596643735C6A226529614E642C7322675A775668547356664A73546A4265586144645D7326673E7758685073546642735C6A246521614E64557348671'
tp216
aatRp217
sbsS'_cookies'
p218
g172
(crequests.cookies
RequestsCookieJar
p219
g174
NtRp220
(dp221
S'_now'
p222
I1473061293
sS'_policy'
p223
(icookielib
DefaultCookiePolicy
p224
(dp225
S'strict_rfc2965_unverifiable'
p226
I01
sS'strict_ns_domain'
p227
I0
sS'_allowed_domains'
p228
NsS'rfc2109_as_netscape'
p229
NsS'rfc2965'
p230
I00
sS'strict_domain'
p231
I00
sg222
I1473061293
sS'strict_ns_set_path'
p232
I00
sS'strict_ns_unverifiable'
p233
I00
sS'strict_ns_set_initial_dollar'
p234
I00
sS'hide_cookie2'
p235
I00
sS'_blocked_domains'
p236
(tsS'netscape'
p237
I01
sbsg218
(dp238
S'.zhaopin.com'
p239
(dp240
S'/'
(dp241
S'xychkcontr'
p242
(icookielib
Cookie
p243
(dp244
S'comment'
p245
NsS'domain'
p246
S'.zhaopin.com'
p247
sS'secure'
p248
I00
sS'expires'
p249
NsS'domain_specified'
p250
I01
sS'_rest'
p251
(dp252
sS'path'
p253
S'/'
sS'port'
p254
NsS'rfc2109'
p255
I00
sS'name'
p256
g242
sS'domain_initial_dot'
p257
I01
sS'value'
p258
S'70329032%2c0'
p259
sS'version'
p260
I0
sS'port_specified'
p261
I00
sS'path_specified'
p262
I01
sS'discard'
p263
I01
sS'comment_url'
p264
NsbsS'JsOrglogin'
p265
(icookielib
Cookie
p266
(dp267
g245
Nsg246
g239
sg248
I00
sg249
I1473072096
sg250
I01
sg251
(dp268
sg253
S'/'
sg254
Nsg255
I00
sg256
g265
sg257
I01
sg258
S'610588052'
p269
sg260
I0
sg261
I00
sg262
I01
sg263
I00
sg264
NsbsS'RDsUserInfo'
p270
(icookielib
Cookie
p271
(dp272
g245
Nsg246
S'.zhaopin.com'
p273
sg248
I00
sg249
Nsg250
I01
sg251
(dp274
sg253
S'/'
sg254
Nsg255
I00
sg256
g270
sg257
I01
sg258
S'347320664E73556A47655B61466454734A675977506851735F663F73296A4A650C611164117309675D775568527356664A73576A44655A61486433733D675777CA39011A5F662073336A4A655961486424733767577752685173576641735E6A47655B6141645D7332673E775868587349664673476A46655D61496452734267517724682D73596643735C6A226529614E642C7322675A775668547356664A73546A4265586144645D7326673E7758685073546642735C6A246521614E64557348671'
p275
sg260
I0
sg261
I00
sg262
I01
sg263
I01
sg264
Nsbssssbsg108
S'GET'
p276
sbsg180
NsbsS'title'
p277
S'HttpRequest.request'
p278
s.
